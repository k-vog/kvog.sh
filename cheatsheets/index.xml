<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cheatsheets on kvog.sh</title><link>https://kvog.sh/cheatsheets/</link><description>Recent content in Cheatsheets on kvog.sh</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://kvog.sh/cheatsheets/index.xml" rel="self" type="application/rss+xml"/><item><title>C/C++</title><link>https://kvog.sh/cheatsheets/c_cpp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kvog.sh/cheatsheets/c_cpp/</guid><description>&lt;ul&gt;
&lt;li&gt;&lt;a href="#preprocessor-definitions"&gt;Preprocessor Definitions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#platform-detection"&gt;Platform detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#compiler-detection"&gt;Compiler detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#architecture-detection"&gt;Architecture detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gcc-pragmas"&gt;GCC pragmas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#msvc-pragmas"&gt;MSVC pragmas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#standard-headers"&gt;Standard Headers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="preprocessor-definitions"&gt;Preprocessor Definitions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cpredef/predef"&gt;predef wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="platform-detection"&gt;Platform detection&lt;/h3&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;#ifdef _WIN32
 // Windows
#endif

#ifdef __APPLE__
 // Apple - flags for specific devices defined in &amp;lt;TargetConditionals.h&amp;gt;
#endif

#ifdef __linux__
 // Linux
#endif
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="compiler-detection"&gt;Compiler detection&lt;/h3&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;#ifdef __GNUC__
 // GCC
#endif

#ifdef __clang__
 // clang
#endif

#ifdef _MSC_VER
 // Visual C
#endif
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="architecture-detection"&gt;Architecture detection&lt;/h3&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;#if (defined(_MSC_VER) &amp;amp;&amp;amp; _M_X64) || (defined(__GNUC__) &amp;amp;&amp;amp; __amd64__)
 // x86-64
#endif

#if (defined(_MSC_VER) &amp;amp;&amp;amp; _M_ARM64) || (defined(__GNUC__) &amp;amp;&amp;amp; __aarch64__)
 // arm64
#endif
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="gcc-pragmas"&gt;GCC pragmas&lt;/h3&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;// Push/pop warning state
#pragma GCC diagnostic push
#pragma GCC diagnostic pop

// Disable a warning
#pragma GCC diagnostic ignored &amp;#34;-Wunused-variable&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="msvc-pragmas"&gt;MSVC pragmas&lt;/h3&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;// Link against abc.lib
#pragma comment(lib, &amp;#34;abc.lib&amp;#34;)

// Push/pop warning state
#pragma warning(push)
#pragma warning(pop)

// Disable a warning
#pragma warning(disable: 4996)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="standard-headers"&gt;Standard Headers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.cppreference.com/w/c/header.html"&gt;C standard headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.cppreference.com/w/cpp/header.html"&gt;C++ standard headers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>